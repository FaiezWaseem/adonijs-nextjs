openapi: "3.0.0"
info:
  title: "Api Documentation"
  version: "1.0.0"
  description: ""
components:
  responses:
    Forbidden:
      description: "Access token is missing or invalid"
    Accepted:
      description: "The request was accepted"
    Created:
      description: "The resource has been created"
    NotFound:
      description: "The resource has been created"
    NotAcceptable:
      description: "The resource has been created"
  securitySchemes:
    BearerAuth:
      type: "http"
      scheme: "bearer"
    BasicAuth:
      type: "http"
      scheme: "basic"
    ApiKeyAuth:
      type: "apiKey"
      in: "header"
      name: "X-API-Key"
  schemas:
    Any:
      description: "Any JSON object not defined as schema"
    PaginationMeta:
      type: "object"
      properties:
        total:
          type: "number"
          example: 100
          nullable: false
        page:
          type: "number"
          example: 2
          nullable: false
        perPage:
          type: "number"
          example: 10
          nullable: false
        currentPage:
          type: "number"
          example: 3
          nullable: false
        lastPage:
          type: "number"
          example: 10
          nullable: false
        firstPage:
          type: "number"
          example: 1
          nullable: false
        lastPageUrl:
          type: "string"
          example: "/?page=10"
          nullable: false
        firstPageUrl:
          type: "string"
          example: "/?page=1"
          nullable: false
        nextPageUrl:
          type: "string"
          example: "/?page=6"
          nullable: false
        previousPageUrl:
          type: "string"
          example: "/?page=5"
          nullable: false
    Comment:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 361
        comment:
          type: "string"
          example: "string"
        post_id:
          type: "number"
          example: 623
        user_id:
          type: "number"
          example: 240
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
      description: "Comment (Model)"
    Post:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 521
        title:
          type: "string"
          example: "Lorem Ipsum"
        body:
          type: "string"
          example: "string"
        user_id:
          $ref: "#/components/schemas/User"
          example: "string"
        comments:
          type: "array"
          items:
            $ref: "#/components/schemas/Comment"
            example: "string"
        image:
          type: "string"
          example: "string"
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
      description: "Post (Model)"
    User:
      type: "object"
      required: []
      properties:
        id:
          type: "number"
          example: 982
        full_name:
          type: "string"
          example: "John Doe"
        email:
          type: "string"
          example: "johndoe@example.com"
          format: "email"
        avatar_url:
          type: "string"
          example: "string"
        created_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        updated_at:
          type: "string"
          example: "2021-03-23T16:13:08.489+01:00"
          format: "date-time"
        posts:
          type: "array"
          items:
            $ref: "#/components/schemas/Post"
            example: "string"
      description: "User (Model)"
    createCommentValidator:
      type: "object"
      properties:
        comment:
          type: "string"
          example: "Lorem Ipsum"
          minLength: 6
      example:
        comment: "Lorem Ipsum"
      description: "createCommentValidator (Validator)"
    createPostValidator:
      type: "object"
      properties:
        title:
          type: "string"
          example: "Lorem Ipsum"
          minLength: 6
        body:
          type: "string"
          example: "Lorem Ipsum"
      example:
        title: "Lorem Ipsum"
        body: "Lorem Ipsum"
      description: "createPostValidator (Validator)"
    createUserValidator:
      type: "object"
      properties:
        fullName:
          type: "string"
          example: "Lorem Ipsum"
          minLength: 4
        email:
          type: "string"
          example: "Lorem Ipsum"
        password:
          type: "string"
          example: "Lorem Ipsum"
          minLength: 6
      example:
        fullName: "Lorem Ipsum"
        email: "Lorem Ipsum"
        password: "Lorem Ipsum"
      description: "createUserValidator (Validator)"
paths:
  /api/v1/me:
    get:
      summary: " (getMe)"
      description: "\n\n _app/controllers/users_controller.ts_ - **getMe**"
      parameters: []
      tags:
        - "V1"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    delete:
      summary: "Delete v1 (destroy)"
      description: "\n\n _app/controllers/users_controller.ts_ - **destroy**"
      parameters: []
      tags:
        - "V1"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    put:
      summary: "Update v1 (update)"
      description: "\n\n _app/controllers/users_controller.ts_ - **update**"
      parameters: []
      tags:
        - "V1"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /api/v1/logout:
    get:
      summary: " (logout)"
      description: "\n\n _app/controllers/users_controller.ts_ - **logout**"
      parameters: []
      tags:
        - "V1"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    post:
      summary: " (logout)"
      description: "\n\n _app/controllers/users_controller.ts_ - **logout**"
      parameters: []
      tags:
        - "V1"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /api/v1/posts:
    get:
      summary: "Get a list of v1 (index)"
      description: "\n\n _app/controllers/posts_controller.ts_ - **index**"
      parameters: []
      tags:
        - "V1"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    post:
      summary: " (create)"
      description: "\n\n _app/controllers/posts_controller.ts_ - **create**"
      parameters: []
      tags:
        - "V1"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /api/v1/posts/{id}:
    get:
      summary: "Get a single instance of v1 (show)"
      description: "\n\n _app/controllers/posts_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "V1"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    put:
      summary: "Update v1 (update)"
      description: "\n\n _app/controllers/posts_controller.ts_ - **update**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "V1"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
    delete:
      summary: "Delete v1 (destroy)"
      description: "\n\n _app/controllers/posts_controller.ts_ - **destroy**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "V1"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
  /api/v1/posts/{id}/comments:
    get:
      summary: "Get a list of v1 (index)"
      description: "\n\n _app/controllers/comments_controller.ts_ - **index**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "V1"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    post:
      summary: " (create)"
      description: "\n\n _app/controllers/comments_controller.ts_ - **create**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
      tags:
        - "V1"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
  /api/v1/posts/{id}/comments/{commentId}:
    get:
      summary: "Get a single instance of v1 (show)"
      description: "\n\n _app/controllers/comments_controller.ts_ - **show**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "commentId"
          schema:
            type: "string"
          required: true
      tags:
        - "V1"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
    put:
      summary: "Update v1 (update)"
      description: "\n\n _app/controllers/comments_controller.ts_ - **update**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "commentId"
          schema:
            type: "string"
          required: true
      tags:
        - "V1"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
      requestBody:
        content:
          application/json: {}
    delete:
      summary: "Delete v1 (destroy)"
      description: "\n\n _app/controllers/comments_controller.ts_ - **destroy**"
      parameters:
        - in: "path"
          name: "id"
          schema:
            type: "string"
          required: true
        - in: "path"
          name: "commentId"
          schema:
            type: "string"
          required: true
      tags:
        - "V1"
      responses:
        401:
          description: "Returns **401** (Unauthorized)"
        403:
          description: "Returns **403** (Forbidden)"
      security:
        - BearerAuth:
            - "access"
  /api/v1/login:
    post:
      summary: " (login)"
      description: "\n\n _app/controllers/users_controller.ts_ - **login**"
      parameters: []
      tags:
        - "V1"
      responses:
        201:
          description: "Created"
          content:
            application/json: {}
      security: []
      requestBody:
        content:
          application/json: {}
  /api/v1/register:
    post:
      summary: " (create)"
      description: "\n\n _app/controllers/users_controller.ts_ - **create**"
      parameters: []
      tags:
        - "V1"
      responses:
        201:
          description: "Created"
          content:
            application/json: {}
      security: []
      requestBody:
        content:
          application/json: {}
  /api/v1/github/redirect:
    get:
      summary: " (githubRedirect)"
      description: "\n\n _app/controllers/users_controller.ts_ - **githubRedirect**"
      parameters: []
      tags:
        - "V1"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
  /api/v1/github/callback:
    get:
      summary: " (githubCallback)"
      description: "\n\n _app/controllers/users_controller.ts_ - **githubCallback**"
      parameters: []
      tags:
        - "V1"
      responses:
        200:
          description: "OK"
          content:
            application/json: {}
      security: []
tags:
  - name: "V1"
    description: "Everything related to V1"
